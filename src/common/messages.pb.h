// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class UisInputData;
class UisPkt;

enum UisPkt_PktCmd {
  UisPkt_PktCmd_INIT = 268435457,
  UisPkt_PktCmd_OPEN = 268435458,
  UisPkt_PktCmd_CLOSE = 268435459,
  UisPkt_PktCmd_CLOSE_SOURCE = 268435460,
  UisPkt_PktCmd_IOCTL = 268435461,
  UisPkt_PktCmd_INPUT = 1
};
bool UisPkt_PktCmd_IsValid(int value);
const UisPkt_PktCmd UisPkt_PktCmd_PktCmd_MIN = UisPkt_PktCmd_INPUT;
const UisPkt_PktCmd UisPkt_PktCmd_PktCmd_MAX = UisPkt_PktCmd_IOCTL;
const int UisPkt_PktCmd_PktCmd_ARRAYSIZE = UisPkt_PktCmd_PktCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* UisPkt_PktCmd_descriptor();
inline const ::std::string& UisPkt_PktCmd_Name(UisPkt_PktCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    UisPkt_PktCmd_descriptor(), value);
}
inline bool UisPkt_PktCmd_Parse(
    const ::std::string& name, UisPkt_PktCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UisPkt_PktCmd>(
    UisPkt_PktCmd_descriptor(), name, value);
}
// ===================================================================

class UisInputData : public ::google::protobuf::Message {
 public:
  UisInputData();
  virtual ~UisInputData();
  
  UisInputData(const UisInputData& from);
  
  inline UisInputData& operator=(const UisInputData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UisInputData& default_instance();
  
  void Swap(UisInputData* other);
  
  // implements Message ----------------------------------------------
  
  UisInputData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UisInputData& from);
  void MergeFrom(const UisInputData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required bytes body = 3;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 3;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  
  // @@protoc_insertion_point(class_scope:UisInputData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::std::string* body_;
  static const ::std::string _default_body_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UisInputData* default_instance_;
};
// -------------------------------------------------------------------

class UisPkt : public ::google::protobuf::Message {
 public:
  UisPkt();
  virtual ~UisPkt();
  
  UisPkt(const UisPkt& from);
  
  inline UisPkt& operator=(const UisPkt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UisPkt& default_instance();
  
  void Swap(UisPkt* other);
  
  // implements Message ----------------------------------------------
  
  UisPkt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UisPkt& from);
  void MergeFrom(const UisPkt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UisPkt_PktCmd PktCmd;
  static const PktCmd INIT = UisPkt_PktCmd_INIT;
  static const PktCmd OPEN = UisPkt_PktCmd_OPEN;
  static const PktCmd CLOSE = UisPkt_PktCmd_CLOSE;
  static const PktCmd CLOSE_SOURCE = UisPkt_PktCmd_CLOSE_SOURCE;
  static const PktCmd IOCTL = UisPkt_PktCmd_IOCTL;
  static const PktCmd INPUT = UisPkt_PktCmd_INPUT;
  static inline bool PktCmd_IsValid(int value) {
    return UisPkt_PktCmd_IsValid(value);
  }
  static const PktCmd PktCmd_MIN =
    UisPkt_PktCmd_PktCmd_MIN;
  static const PktCmd PktCmd_MAX =
    UisPkt_PktCmd_PktCmd_MAX;
  static const int PktCmd_ARRAYSIZE =
    UisPkt_PktCmd_PktCmd_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PktCmd_descriptor() {
    return UisPkt_PktCmd_descriptor();
  }
  static inline const ::std::string& PktCmd_Name(PktCmd value) {
    return UisPkt_PktCmd_Name(value);
  }
  static inline bool PktCmd_Parse(const ::std::string& name,
      PktCmd* value) {
    return UisPkt_PktCmd_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required uint32 sourceId = 1;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sourceid() const;
  inline void set_sourceid(::google::protobuf::uint32 value);
  
  // required uint32 moduleId = 2;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);
  
  // required uint32 seq = 3;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 3;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);
  
  // required .UisPkt.PktCmd cmd = 4;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 4;
  inline ::UisPkt_PktCmd cmd() const;
  inline void set_cmd(::UisPkt_PktCmd value);
  
  // required .UisInputData data = 10;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 10;
  inline const ::UisInputData& data() const;
  inline ::UisInputData* mutable_data();
  
  // @@protoc_insertion_point(class_scope:UisPkt)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 sourceid_;
  ::google::protobuf::uint32 moduleid_;
  ::google::protobuf::uint32 seq_;
  int cmd_;
  ::UisInputData* data_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UisPkt* default_instance_;
};
// ===================================================================

class UisService_Stub;

class UisService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UisService() {};
 public:
  virtual ~UisService();
  
  typedef UisService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void Open(::google::protobuf::RpcController* controller,
                       const ::UisPkt* request,
                       ::UisPkt* response,
                       ::google::protobuf::Closure* done);
  virtual void Ioctl(::google::protobuf::RpcController* controller,
                       const ::UisPkt* request,
                       ::UisPkt* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UisService);
};

class UisService_Stub : public UisService {
 public:
  UisService_Stub(::google::protobuf::RpcChannel* channel);
  UisService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UisService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements UisService ------------------------------------------
  
  void Open(::google::protobuf::RpcController* controller,
                       const ::UisPkt* request,
                       ::UisPkt* response,
                       ::google::protobuf::Closure* done);
  void Ioctl(::google::protobuf::RpcController* controller,
                       const ::UisPkt* request,
                       ::UisPkt* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UisService_Stub);
};


// ===================================================================


// ===================================================================

// UisInputData

// required uint32 type = 1;
inline bool UisInputData::has_type() const {
  return _has_bit(0);
}
inline void UisInputData::clear_type() {
  type_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 UisInputData::type() const {
  return type_;
}
inline void UisInputData::set_type(::google::protobuf::uint32 value) {
  _set_bit(0);
  type_ = value;
}

// required uint32 count = 2;
inline bool UisInputData::has_count() const {
  return _has_bit(1);
}
inline void UisInputData::clear_count() {
  count_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 UisInputData::count() const {
  return count_;
}
inline void UisInputData::set_count(::google::protobuf::uint32 value) {
  _set_bit(1);
  count_ = value;
}

// required bytes body = 3;
inline bool UisInputData::has_body() const {
  return _has_bit(2);
}
inline void UisInputData::clear_body() {
  if (body_ != &_default_body_) {
    body_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UisInputData::body() const {
  return *body_;
}
inline void UisInputData::set_body(const ::std::string& value) {
  _set_bit(2);
  if (body_ == &_default_body_) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void UisInputData::set_body(const char* value) {
  _set_bit(2);
  if (body_ == &_default_body_) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void UisInputData::set_body(const void* value, size_t size) {
  _set_bit(2);
  if (body_ == &_default_body_) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UisInputData::mutable_body() {
  _set_bit(2);
  if (body_ == &_default_body_) {
    body_ = new ::std::string;
  }
  return body_;
}

// -------------------------------------------------------------------

// UisPkt

// required uint32 sourceId = 1;
inline bool UisPkt::has_sourceid() const {
  return _has_bit(0);
}
inline void UisPkt::clear_sourceid() {
  sourceid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 UisPkt::sourceid() const {
  return sourceid_;
}
inline void UisPkt::set_sourceid(::google::protobuf::uint32 value) {
  _set_bit(0);
  sourceid_ = value;
}

// required uint32 moduleId = 2;
inline bool UisPkt::has_moduleid() const {
  return _has_bit(1);
}
inline void UisPkt::clear_moduleid() {
  moduleid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 UisPkt::moduleid() const {
  return moduleid_;
}
inline void UisPkt::set_moduleid(::google::protobuf::uint32 value) {
  _set_bit(1);
  moduleid_ = value;
}

// required uint32 seq = 3;
inline bool UisPkt::has_seq() const {
  return _has_bit(2);
}
inline void UisPkt::clear_seq() {
  seq_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 UisPkt::seq() const {
  return seq_;
}
inline void UisPkt::set_seq(::google::protobuf::uint32 value) {
  _set_bit(2);
  seq_ = value;
}

// required .UisPkt.PktCmd cmd = 4;
inline bool UisPkt::has_cmd() const {
  return _has_bit(3);
}
inline void UisPkt::clear_cmd() {
  cmd_ = 268435457;
  _clear_bit(3);
}
inline ::UisPkt_PktCmd UisPkt::cmd() const {
  return static_cast< ::UisPkt_PktCmd >(cmd_);
}
inline void UisPkt::set_cmd(::UisPkt_PktCmd value) {
  GOOGLE_DCHECK(::UisPkt_PktCmd_IsValid(value));
  _set_bit(3);
  cmd_ = value;
}

// required .UisInputData data = 10;
inline bool UisPkt::has_data() const {
  return _has_bit(4);
}
inline void UisPkt::clear_data() {
  if (data_ != NULL) data_->::UisInputData::Clear();
  _clear_bit(4);
}
inline const ::UisInputData& UisPkt::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::UisInputData* UisPkt::mutable_data() {
  _set_bit(4);
  if (data_ == NULL) data_ = new ::UisInputData;
  return data_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UisPkt_PktCmd>() {
  return ::UisPkt_PktCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
