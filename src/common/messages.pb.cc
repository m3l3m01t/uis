// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UisInputData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UisInputData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UisPkt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UisPkt_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UisPkt_PktCmd_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* UisService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  UisInputData_descriptor_ = file->message_type(0);
  static const int UisInputData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisInputData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisInputData, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisInputData, body_),
  };
  UisInputData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UisInputData_descriptor_,
      UisInputData::default_instance_,
      UisInputData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisInputData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisInputData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UisInputData));
  UisPkt_descriptor_ = file->message_type(1);
  static const int UisPkt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, data_),
  };
  UisPkt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UisPkt_descriptor_,
      UisPkt::default_instance_,
      UisPkt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UisPkt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UisPkt));
  UisPkt_PktCmd_descriptor_ = UisPkt_descriptor_->enum_type(0);
  UisService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UisInputData_descriptor_, &UisInputData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UisPkt_descriptor_, &UisPkt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete UisInputData::default_instance_;
  delete UisInputData_reflection_;
  delete UisPkt::default_instance_;
  delete UisPkt_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\"9\n\014UisInputData\022\014\n\004type"
    "\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\014\n\004body\030\003 \002(\014\"\330\001\n\006"
    "UisPkt\022\020\n\010sourceId\030\001 \002(\r\022\020\n\010moduleId\030\002 \002"
    "(\r\022\013\n\003seq\030\003 \002(\r\022\033\n\003cmd\030\004 \002(\0162\016.UisPkt.Pk"
    "tCmd\022\033\n\004data\030\n \002(\0132\r.UisInputData\"c\n\006Pkt"
    "Cmd\022\014\n\004INIT\020\201\200\200\200\001\022\014\n\004OPEN\020\202\200\200\200\001\022\r\n\005CLOSE"
    "\020\203\200\200\200\001\022\024\n\014CLOSE_SOURCE\020\204\200\200\200\001\022\r\n\005IOCTL\020\205\200"
    "\200\200\001\022\t\n\005INPUT\020\0012A\n\nUisService\022\030\n\004Open\022\007.U"
    "isPkt\032\007.UisPkt\022\031\n\005Ioctl\022\007.UisPkt\032\007.UisPk"
    "t", 361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  UisInputData::default_instance_ = new UisInputData();
  UisPkt::default_instance_ = new UisPkt();
  UisInputData::default_instance_->InitAsDefaultInstance();
  UisPkt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;


// ===================================================================

const ::std::string UisInputData::_default_body_;
#ifndef _MSC_VER
const int UisInputData::kTypeFieldNumber;
const int UisInputData::kCountFieldNumber;
const int UisInputData::kBodyFieldNumber;
#endif  // !_MSC_VER

UisInputData::UisInputData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UisInputData::InitAsDefaultInstance() {
}

UisInputData::UisInputData(const UisInputData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UisInputData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  body_ = const_cast< ::std::string*>(&_default_body_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UisInputData::~UisInputData() {
  SharedDtor();
}

void UisInputData::SharedDtor() {
  if (body_ != &_default_body_) {
    delete body_;
  }
  if (this != default_instance_) {
  }
}

void UisInputData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UisInputData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UisInputData_descriptor_;
}

const UisInputData& UisInputData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

UisInputData* UisInputData::default_instance_ = NULL;

UisInputData* UisInputData::New() const {
  return new UisInputData;
}

void UisInputData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    count_ = 0u;
    if (_has_bit(2)) {
      if (body_ != &_default_body_) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UisInputData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }
      
      // required bytes body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UisInputData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // required bytes body = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UisInputData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // required bytes body = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UisInputData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // required bytes body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UisInputData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UisInputData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UisInputData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UisInputData::MergeFrom(const UisInputData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UisInputData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UisInputData::CopyFrom(const UisInputData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UisInputData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UisInputData::Swap(UisInputData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UisInputData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UisInputData_descriptor_;
  metadata.reflection = UisInputData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UisPkt_PktCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UisPkt_PktCmd_descriptor_;
}
bool UisPkt_PktCmd_IsValid(int value) {
  switch(value) {
    case 1:
    case 268435457:
    case 268435458:
    case 268435459:
    case 268435460:
    case 268435461:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UisPkt_PktCmd UisPkt::INIT;
const UisPkt_PktCmd UisPkt::OPEN;
const UisPkt_PktCmd UisPkt::CLOSE;
const UisPkt_PktCmd UisPkt::CLOSE_SOURCE;
const UisPkt_PktCmd UisPkt::IOCTL;
const UisPkt_PktCmd UisPkt::INPUT;
const UisPkt_PktCmd UisPkt::PktCmd_MIN;
const UisPkt_PktCmd UisPkt::PktCmd_MAX;
const int UisPkt::PktCmd_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int UisPkt::kSourceIdFieldNumber;
const int UisPkt::kModuleIdFieldNumber;
const int UisPkt::kSeqFieldNumber;
const int UisPkt::kCmdFieldNumber;
const int UisPkt::kDataFieldNumber;
#endif  // !_MSC_VER

UisPkt::UisPkt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UisPkt::InitAsDefaultInstance() {
  data_ = const_cast< ::UisInputData*>(&::UisInputData::default_instance());
}

UisPkt::UisPkt(const UisPkt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UisPkt::SharedCtor() {
  _cached_size_ = 0;
  sourceid_ = 0u;
  moduleid_ = 0u;
  seq_ = 0u;
  cmd_ = 268435457;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UisPkt::~UisPkt() {
  SharedDtor();
}

void UisPkt::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void UisPkt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UisPkt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UisPkt_descriptor_;
}

const UisPkt& UisPkt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

UisPkt* UisPkt::default_instance_ = NULL;

UisPkt* UisPkt::New() const {
  return new UisPkt;
}

void UisPkt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourceid_ = 0u;
    moduleid_ = 0u;
    seq_ = 0u;
    cmd_ = 268435457;
    if (_has_bit(4)) {
      if (data_ != NULL) data_->::UisInputData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UisPkt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sourceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sourceid_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moduleId;
        break;
      }
      
      // required uint32 moduleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moduleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }
      
      // required uint32 seq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmd;
        break;
      }
      
      // required .UisPkt.PktCmd cmd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::UisPkt_PktCmd_IsValid(value)) {
            set_cmd(static_cast< ::UisPkt_PktCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_data;
        break;
      }
      
      // required .UisInputData data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UisPkt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sourceId = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sourceid(), output);
  }
  
  // required uint32 moduleId = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->moduleid(), output);
  }
  
  // required uint32 seq = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq(), output);
  }
  
  // required .UisPkt.PktCmd cmd = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->cmd(), output);
  }
  
  // required .UisInputData data = 10;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UisPkt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sourceId = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sourceid(), target);
  }
  
  // required uint32 moduleId = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->moduleid(), target);
  }
  
  // required uint32 seq = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq(), target);
  }
  
  // required .UisPkt.PktCmd cmd = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->cmd(), target);
  }
  
  // required .UisInputData data = 10;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UisPkt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sourceId = 1;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sourceid());
    }
    
    // required uint32 moduleId = 2;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }
    
    // required uint32 seq = 3;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }
    
    // required .UisPkt.PktCmd cmd = 4;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }
    
    // required .UisInputData data = 10;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UisPkt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UisPkt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UisPkt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UisPkt::MergeFrom(const UisPkt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_sourceid(from.sourceid());
    }
    if (from._has_bit(1)) {
      set_moduleid(from.moduleid());
    }
    if (from._has_bit(2)) {
      set_seq(from.seq());
    }
    if (from._has_bit(3)) {
      set_cmd(from.cmd());
    }
    if (from._has_bit(4)) {
      mutable_data()->::UisInputData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UisPkt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UisPkt::CopyFrom(const UisPkt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UisPkt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void UisPkt::Swap(UisPkt* other) {
  if (other != this) {
    std::swap(sourceid_, other->sourceid_);
    std::swap(moduleid_, other->moduleid_);
    std::swap(seq_, other->seq_);
    std::swap(cmd_, other->cmd_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UisPkt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UisPkt_descriptor_;
  metadata.reflection = UisPkt_reflection_;
  return metadata;
}


// ===================================================================

UisService::~UisService() {}

const ::google::protobuf::ServiceDescriptor* UisService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UisService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UisService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UisService_descriptor_;
}

void UisService::Open(::google::protobuf::RpcController* controller,
                         const ::UisPkt*,
                         ::UisPkt*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Open() not implemented.");
  done->Run();
}

void UisService::Ioctl(::google::protobuf::RpcController* controller,
                         const ::UisPkt*,
                         ::UisPkt*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Ioctl() not implemented.");
  done->Run();
}

void UisService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UisService_descriptor_);
  switch(method->index()) {
    case 0:
      Open(controller,
             ::google::protobuf::down_cast<const ::UisPkt*>(request),
             ::google::protobuf::down_cast< ::UisPkt*>(response),
             done);
      break;
    case 1:
      Ioctl(controller,
             ::google::protobuf::down_cast<const ::UisPkt*>(request),
             ::google::protobuf::down_cast< ::UisPkt*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UisService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UisPkt::default_instance();
    case 1:
      return ::UisPkt::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& UisService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::UisPkt::default_instance();
    case 1:
      return ::UisPkt::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

UisService_Stub::UisService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UisService_Stub::UisService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UisService_Stub::~UisService_Stub() {
  if (owns_channel_) delete channel_;
}

void UisService_Stub::Open(::google::protobuf::RpcController* controller,
                              const ::UisPkt* request,
                              ::UisPkt* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UisService_Stub::Ioctl(::google::protobuf::RpcController* controller,
                              const ::UisPkt* request,
                              ::UisPkt* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
